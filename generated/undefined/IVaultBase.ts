// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class IVaultBase__fillOrderResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get tradeId(): BigInt {
    return this[1].toBigInt();
  }

  get orderId(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get tokens(): Array<Address> {
    return this[4].toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get times(): Array<BigInt> {
    return this[6].toBigIntArray();
  }
}

export class IVaultBase__fillOrderResult {
  value0: Array<IVaultBase__fillOrderResultValue0Struct>;
  value1: Array<BigInt>;

  constructor(
    value0: Array<IVaultBase__fillOrderResultValue0Struct>,
    value1: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<IVaultBase__fillOrderResultValue0Struct> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class IVaultBase__orderResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get tradeId(): BigInt {
    return this[1].toBigInt();
  }

  get orderId(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get tokens(): Array<Address> {
    return this[4].toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get times(): Array<BigInt> {
    return this[6].toBigIntArray();
  }
}

export class IVaultBase__viewStrategyResultValue0Struct extends ethereum.Tuple {
  get tokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get times(): Array<BigInt> {
    return this[2].toBigIntArray();
  }
}

export class IVaultBase__viewTokenAmountsResultValue0Struct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class IVaultBase extends ethereum.SmartContract {
  static bind(address: Address): IVaultBase {
    return new IVaultBase("IVaultBase", address);
  }

  BASE_URI(): string {
    let result = super.call("BASE_URI", "BASE_URI():(string)", []);

    return result[0].toString();
  }

  try_BASE_URI(): ethereum.CallResult<string> {
    let result = super.tryCall("BASE_URI", "BASE_URI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  PRICE_MULTIPLIER(): BigInt {
    let result = super.call(
      "PRICE_MULTIPLIER",
      "PRICE_MULTIPLIER():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PRICE_MULTIPLIER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRICE_MULTIPLIER",
      "PRICE_MULTIPLIER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _tokenTradeLength(_tokenId: BigInt): BigInt {
    let result = super.call(
      "_tokenTradeLength",
      "_tokenTradeLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try__tokenTradeLength(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_tokenTradeLength",
      "_tokenTradeLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activeTokens(_token: Address): boolean {
    let result = super.call("activeTokens", "activeTokens(address):(bool)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBoolean();
  }

  try_activeTokens(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("activeTokens", "activeTokens(address):(bool)", [
      ethereum.Value.fromAddress(_token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createTrade(
    _from: Address,
    _tokens: Array<Address>,
    _amounts: Array<BigInt>,
    _times: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "createTrade",
      "createTrade(address,address[],uint256[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddressArray(_tokens),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromUnsignedBigIntArray(_times)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_createTrade(
    _from: Address,
    _tokens: Array<Address>,
    _amounts: Array<BigInt>,
    _times: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "createTrade",
      "createTrade(address,address[],uint256[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddressArray(_tokens),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromUnsignedBigIntArray(_times)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  fillOrder(
    _orderId: BigInt,
    _router: Address,
    _path: Array<Address>
  ): IVaultBase__fillOrderResult {
    let result = super.call(
      "fillOrder",
      "fillOrder(uint256,address,address[]):((uint256,uint256,uint256,uint256,address[2],uint256[3],uint256[])[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_orderId),
        ethereum.Value.fromAddress(_router),
        ethereum.Value.fromAddressArray(_path)
      ]
    );

    return new IVaultBase__fillOrderResult(
      result[0].toTupleArray<IVaultBase__fillOrderResultValue0Struct>(),
      result[1].toBigIntArray()
    );
  }

  try_fillOrder(
    _orderId: BigInt,
    _router: Address,
    _path: Array<Address>
  ): ethereum.CallResult<IVaultBase__fillOrderResult> {
    let result = super.tryCall(
      "fillOrder",
      "fillOrder(uint256,address,address[]):((uint256,uint256,uint256,uint256,address[2],uint256[3],uint256[])[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_orderId),
        ethereum.Value.fromAddress(_router),
        ethereum.Value.fromAddressArray(_path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IVaultBase__fillOrderResult(
        value[0].toTupleArray<IVaultBase__fillOrderResultValue0Struct>(),
        value[1].toBigIntArray()
      )
    );
  }

  maxTokens(): BigInt {
    let result = super.call("maxTokens", "maxTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxTokens", "maxTokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumDeposit(_token: Address): BigInt {
    let result = super.call(
      "minimumDeposit",
      "minimumDeposit(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_minimumDeposit(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumDeposit",
      "minimumDeposit(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  openOrderId(_index: BigInt): BigInt {
    let result = super.call("openOrderId", "openOrderId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBigInt();
  }

  try_openOrderId(_index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "openOrderId",
      "openOrderId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  openOrdersLength(): BigInt {
    let result = super.call(
      "openOrdersLength",
      "openOrdersLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_openOrdersLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "openOrdersLength",
      "openOrdersLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  order(_orderId: BigInt): IVaultBase__orderResultValue0Struct {
    let result = super.call(
      "order",
      "order(uint256):((uint256,uint256,uint256,uint256,address[2],uint256[3],uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(_orderId)]
    );

    return changetype<IVaultBase__orderResultValue0Struct>(result[0].toTuple());
  }

  try_order(
    _orderId: BigInt
  ): ethereum.CallResult<IVaultBase__orderResultValue0Struct> {
    let result = super.tryCall(
      "order",
      "order(uint256):((uint256,uint256,uint256,uint256,address[2],uint256[3],uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(_orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IVaultBase__orderResultValue0Struct>(value[0].toTuple())
    );
  }

  ordersLength(): BigInt {
    let result = super.call("ordersLength", "ordersLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ordersLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ordersLength", "ordersLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(_tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  strategy(_token: Address): Address {
    let result = super.call("strategy", "strategy(address):(address)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toAddress();
  }

  try_strategy(_token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("strategy", "strategy(address):(address)", [
      ethereum.Value.fromAddress(_token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenCounter(): BigInt {
    let result = super.call("tokenCounter", "tokenCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenCounter", "tokenCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(_owner: Address, _index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    _owner: Address,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOpenOrderId(_tokenId: BigInt, _index: BigInt): BigInt {
    let result = super.call(
      "tokenOpenOrderId",
      "tokenOpenOrderId(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOpenOrderId(
    _tokenId: BigInt,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOpenOrderId",
      "tokenOpenOrderId(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOpenOrdersLength(_tokenId: BigInt): BigInt {
    let result = super.call(
      "tokenOpenOrdersLength",
      "tokenOpenOrdersLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_tokenOpenOrdersLength(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOpenOrdersLength",
      "tokenOpenOrdersLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokens(_index: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);

    return result[0].toAddress();
  }

  try_tokens(_index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensLength(): BigInt {
    let result = super.call("tokensLength", "tokensLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokensLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokensLength", "tokensLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trade(_tokenId: BigInt, _tradeId: BigInt): Array<BigInt> {
    let result = super.call("trade", "trade(uint256,uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
      ethereum.Value.fromUnsignedBigInt(_tradeId)
    ]);

    return result[0].toBigIntArray();
  }

  try_trade(
    _tokenId: BigInt,
    _tradeId: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("trade", "trade(uint256,uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
      ethereum.Value.fromUnsignedBigInt(_tradeId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  viewStrategy(_tokenId: BigInt): IVaultBase__viewStrategyResultValue0Struct {
    let result = super.call(
      "viewStrategy",
      "viewStrategy(uint256):((address[],uint256[],uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return changetype<IVaultBase__viewStrategyResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_viewStrategy(
    _tokenId: BigInt
  ): ethereum.CallResult<IVaultBase__viewStrategyResultValue0Struct> {
    let result = super.tryCall(
      "viewStrategy",
      "viewStrategy(uint256):((address[],uint256[],uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IVaultBase__viewStrategyResultValue0Struct>(value[0].toTuple())
    );
  }

  viewTokenAmounts(
    _tokenId: BigInt
  ): Array<IVaultBase__viewTokenAmountsResultValue0Struct> {
    let result = super.call(
      "viewTokenAmounts",
      "viewTokenAmounts(uint256):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toTupleArray<
      IVaultBase__viewTokenAmountsResultValue0Struct
    >();
  }

  try_viewTokenAmounts(
    _tokenId: BigInt
  ): ethereum.CallResult<
    Array<IVaultBase__viewTokenAmountsResultValue0Struct>
  > {
    let result = super.tryCall(
      "viewTokenAmounts",
      "viewTokenAmounts(uint256):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<IVaultBase__viewTokenAmountsResultValue0Struct>()
    );
  }
}

export class ChangeMinimumDepositCall extends ethereum.Call {
  get inputs(): ChangeMinimumDepositCall__Inputs {
    return new ChangeMinimumDepositCall__Inputs(this);
  }

  get outputs(): ChangeMinimumDepositCall__Outputs {
    return new ChangeMinimumDepositCall__Outputs(this);
  }
}

export class ChangeMinimumDepositCall__Inputs {
  _call: ChangeMinimumDepositCall;

  constructor(call: ChangeMinimumDepositCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _minDeposit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeMinimumDepositCall__Outputs {
  _call: ChangeMinimumDepositCall;

  constructor(call: ChangeMinimumDepositCall) {
    this._call = call;
  }
}

export class CreateTradeCall extends ethereum.Call {
  get inputs(): CreateTradeCall__Inputs {
    return new CreateTradeCall__Inputs(this);
  }

  get outputs(): CreateTradeCall__Outputs {
    return new CreateTradeCall__Outputs(this);
  }
}

export class CreateTradeCall__Inputs {
  _call: CreateTradeCall;

  constructor(call: CreateTradeCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _times(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class CreateTradeCall__Outputs {
  _call: CreateTradeCall;

  constructor(call: CreateTradeCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class DeactivateTokenCall extends ethereum.Call {
  get inputs(): DeactivateTokenCall__Inputs {
    return new DeactivateTokenCall__Inputs(this);
  }

  get outputs(): DeactivateTokenCall__Outputs {
    return new DeactivateTokenCall__Outputs(this);
  }
}

export class DeactivateTokenCall__Inputs {
  _call: DeactivateTokenCall;

  constructor(call: DeactivateTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeactivateTokenCall__Outputs {
  _call: DeactivateTokenCall;

  constructor(call: DeactivateTokenCall) {
    this._call = call;
  }
}

export class FillOrderCall extends ethereum.Call {
  get inputs(): FillOrderCall__Inputs {
    return new FillOrderCall__Inputs(this);
  }

  get outputs(): FillOrderCall__Outputs {
    return new FillOrderCall__Outputs(this);
  }
}

export class FillOrderCall__Inputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _router(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class FillOrderCall__Outputs {
  _call: FillOrderCall;

  constructor(call: FillOrderCall) {
    this._call = call;
  }

  get value0(): Array<FillOrderCallValue0Struct> {
    return this._call.outputValues[0].value.toTupleArray<
      FillOrderCallValue0Struct
    >();
  }

  get value1(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class FillOrderCallValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get tradeId(): BigInt {
    return this[1].toBigInt();
  }

  get orderId(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get tokens(): Array<Address> {
    return this[4].toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get times(): Array<BigInt> {
    return this[6].toBigIntArray();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get value0(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetStrategyCall extends ethereum.Call {
  get inputs(): SetStrategyCall__Inputs {
    return new SetStrategyCall__Inputs(this);
  }

  get outputs(): SetStrategyCall__Outputs {
    return new SetStrategyCall__Outputs(this);
  }
}

export class SetStrategyCall__Inputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _strategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _minDeposit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetStrategyCall__Outputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
