// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreateOrder extends ethereum.Event {
  get params(): CreateOrder__Params {
    return new CreateOrder__Params(this);
  }
}

export class CreateOrder__Params {
  _event: CreateOrder;

  constructor(event: CreateOrder) {
    this._event = event;
  }

  get _creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _orderId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CreateTrade extends ethereum.Event {
  get params(): CreateTrade__Params {
    return new CreateTrade__Params(this);
  }
}

export class CreateTrade__Params {
  _event: CreateTrade;

  constructor(event: CreateTrade) {
    this._event = event;
  }

  get _creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FillOrder extends ethereum.Event {
  get params(): FillOrder__Params {
    return new FillOrder__Params(this);
  }
}

export class FillOrder__Params {
  _event: FillOrder;

  constructor(event: FillOrder) {
    this._event = event;
  }

  get _orderOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _orderId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Controller extends ethereum.SmartContract {
  static bind(address: Address): Controller {
    return new Controller("Controller", address);
  }

  ACTIVE_VAULT(): i32 {
    let result = super.call("ACTIVE_VAULT", "ACTIVE_VAULT():(uint8)", []);

    return result[0].toI32();
  }

  try_ACTIVE_VAULT(): ethereum.CallResult<i32> {
    let result = super.tryCall("ACTIVE_VAULT", "ACTIVE_VAULT():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  DEACTIVATED_VAULT(): i32 {
    let result = super.call(
      "DEACTIVATED_VAULT",
      "DEACTIVATED_VAULT():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_DEACTIVATED_VAULT(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "DEACTIVATED_VAULT",
      "DEACTIVATED_VAULT():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  DepositFees(): Address {
    let result = super.call("DepositFees", "DepositFees():(address)", []);

    return result[0].toAddress();
  }

  try_DepositFees(): ethereum.CallResult<Address> {
    let result = super.tryCall("DepositFees", "DepositFees():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ETH(): Address {
    let result = super.call("ETH", "ETH():(address)", []);

    return result[0].toAddress();
  }

  try_ETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("ETH", "ETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  Fees(): Address {
    let result = super.call("Fees", "Fees():(address)", []);

    return result[0].toAddress();
  }

  try_Fees(): ethereum.CallResult<Address> {
    let result = super.tryCall("Fees", "Fees():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GasTank(): Address {
    let result = super.call("GasTank", "GasTank():(address)", []);

    return result[0].toAddress();
  }

  try_GasTank(): ethereum.CallResult<Address> {
    let result = super.tryCall("GasTank", "GasTank():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GasToken(): Address {
    let result = super.call("GasToken", "GasToken():(address)", []);

    return result[0].toAddress();
  }

  try_GasToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("GasToken", "GasToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  Gelato(): boolean {
    let result = super.call("Gelato", "Gelato():(bool)", []);

    return result[0].toBoolean();
  }

  try_Gelato(): ethereum.CallResult<boolean> {
    let result = super.tryCall("Gelato", "Gelato():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  NOT_A_VAULT(): i32 {
    let result = super.call("NOT_A_VAULT", "NOT_A_VAULT():(uint8)", []);

    return result[0].toI32();
  }

  try_NOT_A_VAULT(): ethereum.CallResult<i32> {
    let result = super.tryCall("NOT_A_VAULT", "NOT_A_VAULT():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  PokeMe(): Address {
    let result = super.call("PokeMe", "PokeMe():(address)", []);

    return result[0].toAddress();
  }

  try_PokeMe(): ethereum.CallResult<Address> {
    let result = super.tryCall("PokeMe", "PokeMe():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  Resolver(): Address {
    let result = super.call("Resolver", "Resolver():(address)", []);

    return result[0].toAddress();
  }

  try_Resolver(): ethereum.CallResult<Address> {
    let result = super.tryCall("Resolver", "Resolver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SLIPPAGE_BASE_POINTS(): BigInt {
    let result = super.call(
      "SLIPPAGE_BASE_POINTS",
      "SLIPPAGE_BASE_POINTS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SLIPPAGE_BASE_POINTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SLIPPAGE_BASE_POINTS",
      "SLIPPAGE_BASE_POINTS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SLIPPAGE_POINTS(): BigInt {
    let result = super.call(
      "SLIPPAGE_POINTS",
      "SLIPPAGE_POINTS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SLIPPAGE_POINTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SLIPPAGE_POINTS",
      "SLIPPAGE_POINTS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activeRouters(param0: Address): boolean {
    let result = super.call("activeRouters", "activeRouters(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_activeRouters(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "activeRouters",
      "activeRouters(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  gelato(): Address {
    let result = super.call("gelato", "gelato():(address)", []);

    return result[0].toAddress();
  }

  try_gelato(): ethereum.CallResult<Address> {
    let result = super.tryCall("gelato", "gelato():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  holdingStrategies(param0: BigInt): Address {
    let result = super.call(
      "holdingStrategies",
      "holdingStrategies(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_holdingStrategies(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "holdingStrategies",
      "holdingStrategies(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  priceMultiplier(_vaultId: BigInt): BigInt {
    let result = super.call(
      "priceMultiplier",
      "priceMultiplier(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return result[0].toBigInt();
  }

  try_priceMultiplier(_vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceMultiplier",
      "priceMultiplier(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  routers(param0: BigInt): Address {
    let result = super.call("routers", "routers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_routers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("routers", "routers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  slippage(_amountIn: BigInt): BigInt {
    let result = super.call("slippage", "slippage(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amountIn)
    ]);

    return result[0].toBigInt();
  }

  try_slippage(_amountIn: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slippage", "slippage(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amountIn)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  taskIds(param0: BigInt, param1: BigInt): Bytes {
    let result = super.call("taskIds", "taskIds(uint256,uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBytes();
  }

  try_taskIds(param0: BigInt, param1: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "taskIds",
      "taskIds(uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokenMaxGas(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "tokenMaxGas",
      "tokenMaxGas(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenMaxGas(param0: BigInt, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenMaxGas",
      "tokenMaxGas(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vault(_vault: Address): i32 {
    let result = super.call("vault", "vault(address):(uint8)", [
      ethereum.Value.fromAddress(_vault)
    ]);

    return result[0].toI32();
  }

  try_vault(_vault: Address): ethereum.CallResult<i32> {
    let result = super.tryCall("vault", "vault(address):(uint8)", [
      ethereum.Value.fromAddress(_vault)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  vaultId(_vault: Address): BigInt {
    let result = super.call("vaultId", "vaultId(address):(uint256)", [
      ethereum.Value.fromAddress(_vault)
    ]);

    return result[0].toBigInt();
  }

  try_vaultId(_vault: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultId", "vaultId(address):(uint256)", [
      ethereum.Value.fromAddress(_vault)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaults(param0: BigInt): Address {
    let result = super.call("vaults", "vaults(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_vaults(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("vaults", "vaults(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultsLength(): BigInt {
    let result = super.call("vaultsLength", "vaultsLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_vaultsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultsLength", "vaultsLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _slippagePoints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _slippageBasePoints(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _routers(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _resolver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddRouterCall extends ethereum.Call {
  get inputs(): AddRouterCall__Inputs {
    return new AddRouterCall__Inputs(this);
  }

  get outputs(): AddRouterCall__Outputs {
    return new AddRouterCall__Outputs(this);
  }
}

export class AddRouterCall__Inputs {
  _call: AddRouterCall;

  constructor(call: AddRouterCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRouterCall__Outputs {
  _call: AddRouterCall;

  constructor(call: AddRouterCall) {
    this._call = call;
  }
}

export class AddVaultCall extends ethereum.Call {
  get inputs(): AddVaultCall__Inputs {
    return new AddVaultCall__Inputs(this);
  }

  get outputs(): AddVaultCall__Outputs {
    return new AddVaultCall__Outputs(this);
  }
}

export class AddVaultCall__Inputs {
  _call: AddVaultCall;

  constructor(call: AddVaultCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddVaultCall__Outputs {
  _call: AddVaultCall;

  constructor(call: AddVaultCall) {
    this._call = call;
  }
}

export class ChangeTokenMinimumDepositCall extends ethereum.Call {
  get inputs(): ChangeTokenMinimumDepositCall__Inputs {
    return new ChangeTokenMinimumDepositCall__Inputs(this);
  }

  get outputs(): ChangeTokenMinimumDepositCall__Outputs {
    return new ChangeTokenMinimumDepositCall__Outputs(this);
  }
}

export class ChangeTokenMinimumDepositCall__Inputs {
  _call: ChangeTokenMinimumDepositCall;

  constructor(call: ChangeTokenMinimumDepositCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _minDeposit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChangeTokenMinimumDepositCall__Outputs {
  _call: ChangeTokenMinimumDepositCall;

  constructor(call: ChangeTokenMinimumDepositCall) {
    this._call = call;
  }
}

export class CreateTradeCall extends ethereum.Call {
  get inputs(): CreateTradeCall__Inputs {
    return new CreateTradeCall__Inputs(this);
  }

  get outputs(): CreateTradeCall__Outputs {
    return new CreateTradeCall__Outputs(this);
  }
}

export class CreateTradeCall__Inputs {
  _call: CreateTradeCall;

  constructor(call: CreateTradeCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _times(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _maxGas(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateTradeCall__Outputs {
  _call: CreateTradeCall;

  constructor(call: CreateTradeCall) {
    this._call = call;
  }
}

export class DeactivateRouterCall extends ethereum.Call {
  get inputs(): DeactivateRouterCall__Inputs {
    return new DeactivateRouterCall__Inputs(this);
  }

  get outputs(): DeactivateRouterCall__Outputs {
    return new DeactivateRouterCall__Outputs(this);
  }
}

export class DeactivateRouterCall__Inputs {
  _call: DeactivateRouterCall;

  constructor(call: DeactivateRouterCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeactivateRouterCall__Outputs {
  _call: DeactivateRouterCall;

  constructor(call: DeactivateRouterCall) {
    this._call = call;
  }
}

export class DeactivateTokenCall extends ethereum.Call {
  get inputs(): DeactivateTokenCall__Inputs {
    return new DeactivateTokenCall__Inputs(this);
  }

  get outputs(): DeactivateTokenCall__Outputs {
    return new DeactivateTokenCall__Outputs(this);
  }
}

export class DeactivateTokenCall__Inputs {
  _call: DeactivateTokenCall;

  constructor(call: DeactivateTokenCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeactivateTokenCall__Outputs {
  _call: DeactivateTokenCall;

  constructor(call: DeactivateTokenCall) {
    this._call = call;
  }
}

export class DeactivateVaultCall extends ethereum.Call {
  get inputs(): DeactivateVaultCall__Inputs {
    return new DeactivateVaultCall__Inputs(this);
  }

  get outputs(): DeactivateVaultCall__Outputs {
    return new DeactivateVaultCall__Outputs(this);
  }
}

export class DeactivateVaultCall__Inputs {
  _call: DeactivateVaultCall;

  constructor(call: DeactivateVaultCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeactivateVaultCall__Outputs {
  _call: DeactivateVaultCall;

  constructor(call: DeactivateVaultCall) {
    this._call = call;
  }
}

export class FillOrderGelatoCall extends ethereum.Call {
  get inputs(): FillOrderGelatoCall__Inputs {
    return new FillOrderGelatoCall__Inputs(this);
  }

  get outputs(): FillOrderGelatoCall__Outputs {
    return new FillOrderGelatoCall__Outputs(this);
  }
}

export class FillOrderGelatoCall__Inputs {
  _call: FillOrderGelatoCall;

  constructor(call: FillOrderGelatoCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _orderId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _router(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _path(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class FillOrderGelatoCall__Outputs {
  _call: FillOrderGelatoCall;

  constructor(call: FillOrderGelatoCall) {
    this._call = call;
  }
}

export class GelatoSettingsCall extends ethereum.Call {
  get inputs(): GelatoSettingsCall__Inputs {
    return new GelatoSettingsCall__Inputs(this);
  }

  get outputs(): GelatoSettingsCall__Outputs {
    return new GelatoSettingsCall__Outputs(this);
  }
}

export class GelatoSettingsCall__Inputs {
  _call: GelatoSettingsCall;

  constructor(call: GelatoSettingsCall) {
    this._call = call;
  }

  get _pokeMe(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _resolver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _gelato(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _gasTank(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class GelatoSettingsCall__Outputs {
  _call: GelatoSettingsCall;

  constructor(call: GelatoSettingsCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetSlippageCall extends ethereum.Call {
  get inputs(): SetSlippageCall__Inputs {
    return new SetSlippageCall__Inputs(this);
  }

  get outputs(): SetSlippageCall__Outputs {
    return new SetSlippageCall__Outputs(this);
  }
}

export class SetSlippageCall__Inputs {
  _call: SetSlippageCall;

  constructor(call: SetSlippageCall) {
    this._call = call;
  }

  get _slippagePoints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _slippageBasePoints(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetSlippageCall__Outputs {
  _call: SetSlippageCall;

  constructor(call: SetSlippageCall) {
    this._call = call;
  }
}

export class SetTokenStrategiesCall extends ethereum.Call {
  get inputs(): SetTokenStrategiesCall__Inputs {
    return new SetTokenStrategiesCall__Inputs(this);
  }

  get outputs(): SetTokenStrategiesCall__Outputs {
    return new SetTokenStrategiesCall__Outputs(this);
  }
}

export class SetTokenStrategiesCall__Inputs {
  _call: SetTokenStrategiesCall;

  constructor(call: SetTokenStrategiesCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _strategies(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _minDeposits(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class SetTokenStrategiesCall__Outputs {
  _call: SetTokenStrategiesCall;

  constructor(call: SetTokenStrategiesCall) {
    this._call = call;
  }
}

export class SetTokenStrategyCall extends ethereum.Call {
  get inputs(): SetTokenStrategyCall__Inputs {
    return new SetTokenStrategyCall__Inputs(this);
  }

  get outputs(): SetTokenStrategyCall__Outputs {
    return new SetTokenStrategyCall__Outputs(this);
  }
}

export class SetTokenStrategyCall__Inputs {
  _call: SetTokenStrategyCall;

  constructor(call: SetTokenStrategyCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _strategy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _minDeposit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetTokenStrategyCall__Outputs {
  _call: SetTokenStrategyCall;

  constructor(call: SetTokenStrategyCall) {
    this._call = call;
  }
}

export class SetVaultURICall extends ethereum.Call {
  get inputs(): SetVaultURICall__Inputs {
    return new SetVaultURICall__Inputs(this);
  }

  get outputs(): SetVaultURICall__Outputs {
    return new SetVaultURICall__Outputs(this);
  }
}

export class SetVaultURICall__Inputs {
  _call: SetVaultURICall;

  constructor(call: SetVaultURICall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _URI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetVaultURICall__Outputs {
  _call: SetVaultURICall;

  constructor(call: SetVaultURICall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
