// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get strategyTokens(): Array<string> | null {
    let value = this.get("strategyTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set strategyTokens(value: Array<string> | null) {
    if (!value) {
      this.unset("strategyTokens");
    } else {
      this.set("strategyTokens", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20", id.toString(), this);
    }
  }

  static load(id: string): ERC20 | null {
    return changetype<ERC20 | null>(store.get("ERC20", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get strategyToken(): string {
    let value = this.get("strategyToken");
    return value!.toString();
  }

  set strategyToken(value: string) {
    this.set("strategyToken", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get erc20Meta(): string {
    let value = this.get("erc20Meta");
    return value!.toString();
  }

  set erc20Meta(value: string) {
    this.set("erc20Meta", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class StrategyToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StrategyToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StrategyToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StrategyToken", id.toString(), this);
    }
  }

  static load(id: string): StrategyToken | null {
    return changetype<StrategyToken | null>(store.get("StrategyToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get strategyId(): BigInt {
    let value = this.get("strategyId");
    return value!.toBigInt();
  }

  set strategyId(value: BigInt) {
    this.set("strategyId", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get trades(): Array<string> | null {
    let value = this.get("trades");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set trades(value: Array<string> | null) {
    if (!value) {
      this.unset("trades");
    } else {
      this.set("trades", Value.fromStringArray(<Array<string>>value));
    }
  }

  get erc20(): Array<string> | null {
    let value = this.get("erc20");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set erc20(value: Array<string> | null) {
    if (!value) {
      this.unset("erc20");
    } else {
      this.set("erc20", Value.fromStringArray(<Array<string>>value));
    }
  }

  get open(): boolean {
    let value = this.get("open");
    return value!.toBoolean();
  }

  set open(value: boolean) {
    this.set("open", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Trade must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Trade", id.toString(), this);
    }
  }

  static load(id: string): Trade | null {
    return changetype<Trade | null>(store.get("Trade", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeId(): BigInt {
    let value = this.get("tradeId");
    return value!.toBigInt();
  }

  set tradeId(value: BigInt) {
    this.set("tradeId", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get orders(): Array<string> | null {
    let value = this.get("orders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set orders(value: Array<string> | null) {
    if (!value) {
      this.unset("orders");
    } else {
      this.set("orders", Value.fromStringArray(<Array<string>>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    return value!.toBigInt();
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get fromToken(): Bytes {
    let value = this.get("fromToken");
    return value!.toBytes();
  }

  set fromToken(value: Bytes) {
    this.set("fromToken", Value.fromBytes(value));
  }

  get toToken(): Bytes {
    let value = this.get("toToken");
    return value!.toBytes();
  }

  set toToken(value: Bytes) {
    this.set("toToken", Value.fromBytes(value));
  }

  get amountIn(): BigDecimal {
    let value = this.get("amountIn");
    return value!.toBigDecimal();
  }

  set amountIn(value: BigDecimal) {
    this.set("amountIn", Value.fromBigDecimal(value));
  }

  get desiredAmountOut(): BigDecimal {
    let value = this.get("desiredAmountOut");
    return value!.toBigDecimal();
  }

  set desiredAmountOut(value: BigDecimal) {
    this.set("desiredAmountOut", Value.fromBigDecimal(value));
  }

  get amountOut(): BigDecimal {
    let value = this.get("amountOut");
    return value!.toBigDecimal();
  }

  set amountOut(value: BigDecimal) {
    this.set("amountOut", Value.fromBigDecimal(value));
  }

  get expiration(): BigInt {
    let value = this.get("expiration");
    return value!.toBigInt();
  }

  set expiration(value: BigInt) {
    this.set("expiration", Value.fromBigInt(value));
  }

  get open(): boolean {
    let value = this.get("open");
    return value!.toBoolean();
  }

  set open(value: boolean) {
    this.set("open", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get strategyToken(): string {
    let value = this.get("strategyToken");
    return value!.toString();
  }

  set strategyToken(value: string) {
    this.set("strategyToken", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get creationTime(): BigInt {
    let value = this.get("creationTime");
    return value!.toBigInt();
  }

  set creationTime(value: BigInt) {
    this.set("creationTime", Value.fromBigInt(value));
  }
}

export class ERC20Meta extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20Meta entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20Meta must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20Meta", id.toString(), this);
    }
  }

  static load(id: string): ERC20Meta | null {
    return changetype<ERC20Meta | null>(store.get("ERC20Meta", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get("priceUSD");
    return value!.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set("priceUSD", Value.fromBigDecimal(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalBalance(): BigDecimal {
    let value = this.get("totalBalance");
    return value!.toBigDecimal();
  }

  set totalBalance(value: BigDecimal) {
    this.set("totalBalance", Value.fromBigDecimal(value));
  }

  get totalValueUSD(): BigDecimal {
    let value = this.get("totalValueUSD");
    return value!.toBigDecimal();
  }

  set totalValueUSD(value: BigDecimal) {
    this.set("totalValueUSD", Value.fromBigDecimal(value));
  }
}

export class Controller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Controller entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Controller must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Controller", id.toString(), this);
    }
  }

  static load(id: string): Controller | null {
    return changetype<Controller | null>(store.get("Controller", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get strategyCount(): BigInt {
    let value = this.get("strategyCount");
    return value!.toBigInt();
  }

  set strategyCount(value: BigInt) {
    this.set("strategyCount", Value.fromBigInt(value));
  }

  get userCount(): BigInt {
    let value = this.get("userCount");
    return value!.toBigInt();
  }

  set userCount(value: BigInt) {
    this.set("userCount", Value.fromBigInt(value));
  }

  get erc20(): Array<string> | null {
    let value = this.get("erc20");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set erc20(value: Array<string> | null) {
    if (!value) {
      this.unset("erc20");
    } else {
      this.set("erc20", Value.fromStringArray(<Array<string>>value));
    }
  }

  get totalOrderCount(): BigInt {
    let value = this.get("totalOrderCount");
    return value!.toBigInt();
  }

  set totalOrderCount(value: BigInt) {
    this.set("totalOrderCount", Value.fromBigInt(value));
  }

  get openOrderCount(): BigInt {
    let value = this.get("openOrderCount");
    return value!.toBigInt();
  }

  set openOrderCount(value: BigInt) {
    this.set("openOrderCount", Value.fromBigInt(value));
  }

  get filledOrderCount(): BigInt {
    let value = this.get("filledOrderCount");
    return value!.toBigInt();
  }

  set filledOrderCount(value: BigInt) {
    this.set("filledOrderCount", Value.fromBigInt(value));
  }

  get totalValueUSD(): BigDecimal {
    let value = this.get("totalValueUSD");
    return value!.toBigDecimal();
  }

  set totalValueUSD(value: BigDecimal) {
    this.set("totalValueUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeDepositedUSD(): BigDecimal {
    let value = this.get("totalVolumeDepositedUSD");
    return value!.toBigDecimal();
  }

  set totalVolumeDepositedUSD(value: BigDecimal) {
    this.set("totalVolumeDepositedUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeFilledUSD(): BigDecimal {
    let value = this.get("totalVolumeFilledUSD");
    return value!.toBigDecimal();
  }

  set totalVolumeFilledUSD(value: BigDecimal) {
    this.set("totalVolumeFilledUSD", Value.fromBigDecimal(value));
  }
}
